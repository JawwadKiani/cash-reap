{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 18, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jawwa/OneDrive/Desktop/Documents/My-Projects/CashReap/CashReap-1/cashreap/src/components/card-comparison.tsx"],"sourcesContent":["import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  X, \n  Plus, \n  CreditCard, \n  DollarSign, \n  Calendar,\n  Star,\n  Check,\n  Minus,\n  Info\n} from \"lucide-react\";\n\ninterface CreditCardData {\n  id: string;\n  name: string;\n  issuer: string;\n  annualFee: number;\n  baseReward: number;\n  description: string;\n  creditScoreRequired?: string;\n  welcomeBonus?: string;\n  features?: string[];\n}\n\ninterface CardComparisonProps {\n  selectedCards?: CreditCardData[];\n  onCardRemove?: (cardId: string) => void;\n  onCardAdd?: () => void;\n  className?: string;\n}\n\nconst SAMPLE_CARDS: CreditCardData[] = [\n  {\n    id: \"chase-freedom-flex\",\n    name: \"Chase Freedom Flex\",\n    issuer: \"Chase\",\n    annualFee: 0,\n    baseReward: 1,\n    description: \"5% cash back on rotating categories, 5% on travel through Chase, 3% on dining and drugstores, 1% on all other purchases\",\n    creditScoreRequired: \"Good (670+)\",\n    welcomeBonus: \"$200 after spending $500 in first 3 months\",\n    features: [\n      \"No annual fee\",\n      \"5% rotating categories (up to $1,500/quarter)\",\n      \"3% back on dining and drugstores\", \n      \"Cell phone protection\",\n      \"Purchase protection\"\n    ]\n  },\n  {\n    id: \"citi-double-cash\",\n    name: \"Citi Double Cash Card\",\n    issuer: \"Citi\",\n    annualFee: 0,\n    baseReward: 2,\n    description: \"2% cash back on all purchases - 1% when you buy, 1% when you pay\",\n    creditScoreRequired: \"Good (670+)\",\n    welcomeBonus: \"$200 after spending $1,500 in first 6 months\",\n    features: [\n      \"No annual fee\",\n      \"2% back on everything\",\n      \"No rotating categories\",\n      \"No caps on rewards\",\n      \"Balance transfer offers\"\n    ]\n  },\n  {\n    id: \"amex-gold\",\n    name: \"Gold Card\",\n    issuer: \"American Express\",\n    annualFee: 250,\n    baseReward: 1,\n    description: \"4X points at restaurants and on up to $25,000 in annual grocery store purchases, then 1X\",\n    creditScoreRequired: \"Good to Excellent (670+)\",\n    welcomeBonus: \"60,000 points after spending $4,000 in first 6 months\",\n    features: [\n      \"4X points on dining\",\n      \"4X points on groceries (up to $25K)\",\n      \"$120 dining credit\",\n      \"$100 airline fee credit\",\n      \"No foreign transaction fees\"\n    ]\n  }\n];\n\nconst COMPARISON_CATEGORIES = [\n  { key: \"annualFee\", label: \"Annual Fee\", type: \"fee\" },\n  { key: \"baseReward\", label: \"Base Rewards\", type: \"reward\" },\n  { key: \"welcomeBonus\", label: \"Welcome Bonus\", type: \"text\" },\n  { key: \"creditScoreRequired\", label: \"Credit Score\", type: \"text\" },\n  { key: \"features\", label: \"Key Benefits\", type: \"list\" }\n];\n\nexport function CardComparison({ \n  selectedCards = SAMPLE_CARDS.slice(0, 2), \n  onCardRemove, \n  onCardAdd,\n  className \n}: CardComparisonProps) {\n  const [expandedFeatures, setExpandedFeatures] = useState<string | null>(null);\n\n  const formatValue = (card: CreditCardData, category: any) => {\n    switch (category.type) {\n      case \"fee\":\n        return card.annualFee === 0 ? \"No Annual Fee\" : `$${card.annualFee}`;\n      case \"reward\":\n        return `${card.baseReward}%`;\n      case \"text\":\n        return (card as any)[category.key] || \"Not specified\";\n      case \"list\":\n        return card.features || [];\n      default:\n        return (card as any)[category.key] || \"â€”\";\n    }\n  };\n\n  const getBestValue = (cards: CreditCardData[], category: any) => {\n    if (category.type === \"fee\") {\n      return Math.min(...cards.map(c => c.annualFee));\n    }\n    if (category.type === \"reward\") {\n      return Math.max(...cards.map(c => c.baseReward));\n    }\n    return null;\n  };\n\n  const isHighlighted = (card: CreditCardData, category: any, bestValue: any) => {\n    if (bestValue === null) return false;\n    \n    if (category.type === \"fee\") {\n      return card.annualFee === bestValue;\n    }\n    if (category.type === \"reward\") {\n      return card.baseReward === bestValue;\n    }\n    return false;\n  };\n\n  if (selectedCards.length === 0) {\n    return (\n      <Card className={`${className}`}>\n        <CardContent className=\"p-8 text-center\">\n          <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4\">\n            <CreditCard className=\"w-8 h-8 text-muted-foreground\" />\n          </div>\n          <CardTitle className=\"mb-2\">Compare Credit Cards</CardTitle>\n          <CardDescription className=\"mb-4\">\n            Select cards to see a detailed side-by-side comparison\n          </CardDescription>\n          <Button onClick={onCardAdd}>\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Add Cards to Compare\n          </Button>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className={`space-y-4 ${className}`}>\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h3 className=\"text-lg font-semibold\">Card Comparison</h3>\n          <p className=\"text-sm text-muted-foreground\">\n            Compare {selectedCards.length} cards side by side\n          </p>\n        </div>\n        {selectedCards.length < 3 && (\n          <Button variant=\"outline\" size=\"sm\" onClick={onCardAdd}>\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Add Card\n          </Button>\n        )}\n      </div>\n\n      {/* Comparison Table */}\n      <div className=\"grid gap-4\">\n        {/* Card Headers */}\n        <div className={`grid gap-4 ${\n          selectedCards.length === 2 ? \"grid-cols-2\" : \n          selectedCards.length === 3 ? \"grid-cols-3\" : \"grid-cols-1\"\n        }`}>\n          {selectedCards.map((card) => (\n            <Card key={card.id} className=\"relative\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <CardTitle className=\"text-base\">{card.name}</CardTitle>\n                    <CardDescription className=\"text-sm\">{card.issuer}</CardDescription>\n                  </div>\n                  {onCardRemove && (\n                    <Button \n                      variant=\"ghost\" \n                      size=\"sm\"\n                      onClick={() => onCardRemove(card.id)}\n                      className=\"h-6 w-6 p-0\"\n                    >\n                      <X className=\"h-4 w-4\" />\n                    </Button>\n                  )}\n                </div>\n                \n                {/* Quick Stats */}\n                <div className=\"flex gap-2 mt-3\">\n                  <Badge variant={card.annualFee === 0 ? \"secondary\" : \"outline\"} className=\"text-xs\">\n                    {card.annualFee === 0 ? \"No Fee\" : `$${card.annualFee}`}\n                  </Badge>\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    {card.baseReward}% Base\n                  </Badge>\n                </div>\n              </CardHeader>\n            </Card>\n          ))}\n        </div>\n\n        {/* Comparison Categories */}\n        <Card>\n          <CardContent className=\"p-0\">\n            {COMPARISON_CATEGORIES.map((category, index) => {\n              const bestValue = getBestValue(selectedCards, category);\n              \n              return (\n                <div key={category.key}>\n                  <div className={`grid gap-4 p-4 ${\n                    selectedCards.length === 2 ? \"grid-cols-[200px_1fr_1fr]\" : \n                    selectedCards.length === 3 ? \"grid-cols-[200px_1fr_1fr_1fr]\" : \"grid-cols-[200px_1fr]\"\n                  }`}>\n                    {/* Category Label */}\n                    <div className=\"flex items-center gap-2\">\n                      <span className=\"font-medium text-sm\">{category.label}</span>\n                      {category.key === \"features\" && (\n                        <Info className=\"h-3 w-3 text-muted-foreground\" />\n                      )}\n                    </div>\n                    \n                    {/* Card Values */}\n                    {selectedCards.map((card) => {\n                      const value = formatValue(card, category);\n                      const highlighted = isHighlighted(card, category, bestValue);\n                      \n                      if (category.type === \"list\") {\n                        return (\n                          <div key={card.id} className=\"space-y-1\">\n                            {(value as string[]).slice(0, 3).map((feature, idx) => (\n                              <div key={idx} className=\"flex items-center gap-2\">\n                                <Check className=\"h-3 w-3 text-green-600 flex-shrink-0\" />\n                                <span className=\"text-xs\">{feature}</span>\n                              </div>\n                            ))}\n                            {(value as string[]).length > 3 && (\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => setExpandedFeatures(\n                                  expandedFeatures === card.id ? null : card.id\n                                )}\n                                className=\"h-6 text-xs p-0 text-muted-foreground\"\n                              >\n                                {expandedFeatures === card.id ? \"Show less\" : `+${(value as string[]).length - 3} more`}\n                              </Button>\n                            )}\n                            \n                            {/* Expanded Features */}\n                            {expandedFeatures === card.id && (\n                              <div className=\"space-y-1 pt-2\">\n                                {(value as string[]).slice(3).map((feature, idx) => (\n                                  <div key={idx} className=\"flex items-center gap-2\">\n                                    <Check className=\"h-3 w-3 text-green-600 flex-shrink-0\" />\n                                    <span className=\"text-xs\">{feature}</span>\n                                  </div>\n                                ))}\n                              </div>\n                            )}\n                          </div>\n                        );\n                      }\n                      \n                      return (\n                        <div key={card.id} className={`text-sm ${\n                          highlighted ? \"font-semibold text-green-600\" : \"\"\n                        }`}>\n                          {highlighted && <Star className=\"h-3 w-3 inline mr-1 text-green-600\" />}\n                          {value as string}\n                        </div>\n                      );\n                    })}\n                  </div>\n                  \n                  {index < COMPARISON_CATEGORIES.length - 1 && <Separator />}\n                </div>\n              );\n            })}\n          </CardContent>\n        </Card>\n\n        {/* Bottom Summary */}\n        <Card className=\"bg-muted/50\">\n          <CardContent className=\"p-4\">\n            <div className=\"text-center\">\n              <h4 className=\"font-semibold mb-2\">Quick Recommendation</h4>\n              <p className=\"text-sm text-muted-foreground mb-3\">\n                Based on general spending patterns, here's our suggestion:\n              </p>\n              \n              {selectedCards.length >= 2 && (\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-center gap-4 text-xs\">\n                    <div className=\"text-center\">\n                      <div className=\"font-medium\">Best for No Fee</div>\n                      <div className=\"text-muted-foreground\">\n                        {selectedCards.find(c => c.annualFee === 0)?.name || \"None\"}\n                      </div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"font-medium\">Highest Base Rate</div>\n                      <div className=\"text-muted-foreground\">\n                        {selectedCards.find(c => c.baseReward === Math.max(...selectedCards.map(card => card.baseReward)))?.name}\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <Button size=\"sm\" variant=\"outline\">\n                    Get Personalized Recommendation\n                  </Button>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 694, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jawwa/OneDrive/Desktop/Documents/My-Projects/CashReap/CashReap-1/cashreap/src/app/page.tsx"],"sourcesContent":["import CardComparison from '@/components/card-comparison';\n\nexport default function Home() {\n  return (\n    <main className=\"min-h-screen p-8 max-w-4xl mx-auto flex flex-col items-center\">\n      <h1 className=\"text-5xl font-extrabold mb-4 text-center text-primary\">\n        CashReap\n      </h1>\n      <p className=\"text-lg text-center mb-12 text-muted-foreground max-w-xl\">\n        Harvest Your Rewards â€” Maximize your credit card cashback effortlessly.\n      </p>\n\n      {/* Main feature placeholder */}\n      <section className=\"w-full\">\n        <CardComparison />\n      </section>\n\n      {/* You can add more sections here later */}\n    </main>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;;;AAEe,SAAS;IACtB,qBACE,8OAAC;QAAK,WAAU;;0BACd,8OAAC;gBAAG,WAAU;0BAAwD;;;;;;0BAGtE,8OAAC;gBAAE,WAAU;0BAA2D;;;;;;0BAKxE,8OAAC;gBAAQ,WAAU;0BACjB,cAAA,8OAAC,wIAAA,CAAA,UAAc;;;;;;;;;;;;;;;;AAMvB","debugId":null}}]
}